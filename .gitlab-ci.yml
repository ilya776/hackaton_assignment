stages:
  - lint
  - test
  - scan
  - build
  - deploy

variables:
  ENV_NAME: "prod"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: "tcp://docker:2375"
  SSH_PRIVATE_KEY_PATH: "/tmp/deploy_key.pem"
  PROJECT_DIR: "/home/ubuntu/hacathon"

.default_job: &default_job
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache openssh git bash curl
    # Setup SSH known hosts for secure connection (prevents man-in-the-middle)
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    # Add private SSH key with correct permissions
    - echo "$SSH_PRIVATE_KEY" > $SSH_PRIVATE_KEY_PATH
    - chmod 600 $SSH_PRIVATE_KEY_PATH
    # Configure git/ssh to use the private key and known_hosts strictly
    - export GIT_SSH_COMMAND="ssh -i $SSH_PRIVATE_KEY_PATH -o UserKnownHostsFile=~/.ssh/known_hosts -o StrictHostKeyChecking=yes"

# =========================
# Backend code linting
# =========================

lint_backend:
  <<: *default_job
  stage: lint
  image: python:3.11
  before_script:
    - pip install black isort flake8
  script:
    - cd backend
    - black --check .
    - isort --check-only .
    - flake8 .
  allow_failure: false
  retry: 2

# =========================
# Frontend code linting
# =========================

lint_frontend:
  <<: *default_job
  stage: lint
  image: node:20
  script:
    - apt-get update && apt-get install -y git curl bash
    - cd frontend
    - npm ci
    - npm run lint
  allow_failure: false
  retry: 2
# =========================
# Backend tests execution
# =========================

test_backend:
  <<: *default_job
  stage: test
  image: python:3.11
  before_script:
    - pip install -r backend/requirements.txt
  script:
    - cd backend
    - python manage.py test --verbosity=2
  allow_failure: false
  retry: 1

# =========================
# Docker image vulnerability scan with Trivy
# =========================

scan_docker:
  <<: *default_job
  stage: scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy image --exit-code 1 --severity HIGH,CRITICAL backend || { echo "Backend image has critical vulnerabilities"; exit 1; }
    - trivy image --exit-code 1 --severity HIGH,CRITICAL frontend || { echo "Frontend image has critical vulnerabilities"; exit 1; }
  allow_failure: false
  retry: 1

# =========================
# Build Docker images for environment
# =========================

build:
  <<: *default_job
  stage: build
  script:
    - docker compose -f docker-compose.${ENV_NAME}.yml build
  allow_failure: false

# =========================
# Deploy application to production server
# =========================

deploy_prod:
  <<: *default_job
  stage: deploy
  only:
    - main
  environment:
    name: production
    url: https://your-production-url.example.com
  script:
    - ssh -o StrictHostKeyChecking=yes -i $SSH_PRIVATE_KEY_PATH ubuntu@18.197.176.80 "
      cd $PROJECT_DIR &&
      git reset --hard &&
      git pull origin main &&
      docker compose -f docker-compose.prod.yml down &&
      docker compose -f docker-compose.prod.yml up -d --build &&
      docker image prune -f
      "
  allow_failure: false
  retry: 2
