stages:
  - lint
  - test
  - scan
  - build
  - deploy

variables:
  ENV_NAME: "prod"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: "tcp://docker:2375"
  SSH_PRIVATE_KEY_PATH: "/tmp/deploy_key.pem"
  PROJECT_DIR: "/home/ubuntu/hacathon"

.default_job: &default_job
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache openssh git
    - mkdir -p ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - echo "$SSH_PRIVATE_KEY" > $SSH_PRIVATE_KEY_PATH
    - chmod 600 $SSH_PRIVATE_KEY_PATH

# =========================
# Code Quality & Linting
# =========================

lint_backend:
  <<: *default_job
  stage: lint
  image: python:3.11
  before_script:
    - pip install black isort flake8
  script:
    - cd backend
    - black --check .
    - isort --check-only .
    - flake8 .

lint_frontend:
  <<: *default_job
  stage: lint
  image: node:20
  script:
    - cd frontend
    - npm ci
    - npm run lint

# ===================
# Run tests
# ===================

test_backend:
  <<: *default_job
  stage: test
  image: python:3.11
  before_script:
    - pip install -r backend/requirements.txt
  script:
    - cd backend
    - python manage.py test

# =====================
# Security Scan with Trivy
# =====================

scan_docker:
  <<: *default_job
  stage: scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy image --exit-code 1 --severity HIGH,CRITICAL backend
    - trivy image --exit-code 1 --severity HIGH,CRITICAL frontend

# ================
# Build
# ================

build:
  <<: *default_job
  stage: build
  script:
    - docker compose -f docker-compose.${ENV_NAME}.yml build

# ==================
# Deploy to VPS
# ==================

deploy_prod:
  <<: *default_job
  stage: deploy
  only:
    - main
  environment: production
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY_PATH ubuntu@18.197.176.80 "
      cd $PROJECT_DIR &&
      git pull &&
      docker compose -f docker-compose.prod.yml down &&
      docker compose -f docker-compose.prod.yml up -d --build &&
      docker image prune -f
      "
