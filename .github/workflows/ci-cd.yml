name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: app_db_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-django coverage

    - name: Run tests with coverage
      env:
        POSTGRES_DB: app_db_test
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        DEBUG: 'True'
        SECRET_KEY: 'test-secret-key'
      run: |
        cd backend
        coverage run -m pytest
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hacathon-backend:${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hacathon-backend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hacathon-backend:buildcache,mode=max

    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hacathon-frontend:${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hacathon-frontend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hacathon-frontend:buildcache,mode=max

    - name: Build and push MailHog
      uses: docker/build-push-action@v4
      with:
        context: ./mailhog
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hacathon-mailhog:${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hacathon-mailhog:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hacathon-mailhog:buildcache,mode=max

    - name: Build and push Nginx
      uses: docker/build-push-action@v4
      with:
        context: ./nginx
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/hacathon-nginx:${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hacathon-nginx:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/hacathon-nginx:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          cd /path/to/production/app
          git pull
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
