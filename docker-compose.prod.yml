services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - envs/.env.prod
    environment:
      - DJANGO_APPLY_MIGRATIONS=true
      - DJANGO_COLLECT_STATIC=true
    volumes:
      - backend_static:/app/static
      - backend_media:/app/media
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    entrypoint: ["/app/entrypoint.prod.sh"]
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "core.wsgi:application"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - internal
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs:ro
      - backend_static:/usr/share/nginx/html/static:ro
      - backend_media:/usr/share/nginx/html/media:ro
    depends_on:
      - backend
      - frontend
      - mailhog
    networks:
      - internal
      - external
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  mailhog:
    build:
      context: ./mailhog
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - internal
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8025/api/v2/messages"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - envs/.env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_db -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  internal:
    driver: bridge
    internal: true
  external:
    driver: bridge

volumes:
  postgres_data:
  backend_static:
  backend_media:
